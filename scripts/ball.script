function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.speed_x = 0 
	self.speed_y = 150 
	self.accel_x = 0 
	self.accel_y = 350
	self.drop = false 
	self.sounded = false
	self.alpha = 1

	self.pos = {
		x = 0, 
		y = 0
	}


	self.kick_quality = 0 
	self.kick_timer = 0 	

	self.score = 0

	self.duration = 0
	self.last_duration = 0
	
end

local function endgame() 
	msg.post("main:/controller#controller", "end_game")

end 

function update(self, dt)


	-- Ball update
	self.pos = go.get_position()

	
	
	self.pos.x = self.pos.x - self.speed_x*dt
	self.pos.y = self.pos.y - self.speed_y*dt
	self.speed_x = self.speed_x + self.accel_x*dt
	self.speed_y = self.speed_y + self.accel_y*dt


	if self.pos.y <= 110 and self.speed_y > 0 then 
		self.drop = true 
		self.speed_y = -(self.speed_y*0.4) 
		self.pos.y = 110

		if math.abs(self.speed_y) < 25 then 
			self.speed_y = 0 
			self.accel_y = 0 
		end 
	end 	
	

	if not self.drop and self.is_start_timer then  
		self.kick_timer =  self.kick_timer + dt 
		self.kick_quality  = (0.18 - self.kick_timer) / 0.18
		if self.kick_quality < 0 then 
			self.kick_quality = -self.kick_quality 
		end 
	else 
		self.kick_timer = 0 
		self.kick_quality = 0
	end 

	if self.speed_y > 0 and not self.drop then  
		if self.pos.y >= 128 and self.pos.y <= 132 then 
			if self.kick_quality > 0 then 
				self.speed_y = - 200 * self.kick_quality - 100 
				self.accel_y = 350 
				self.score = self.score + 1 
				msg.post("main:/controller#controller", "update_score")
			end 
		end 
	end 


	if self.pos.y > 200 then 
		sprite.play_flipbook("player1#sprite", "Player1_looking_high")
	end 
	
	if self.pos.y > 150 and self.pos.y < 200 then 
		sprite.play_flipbook("player1#sprite", "Player1_looking_low")
	end 

	

	if self.drop then 
		go.animate(go.get_id("/player1"), "rotation", go.PLAYBACK_ONCE_FORWARD, vmath.quat_rotation_z(1.57),  go.EASING_LINEAR, 0.2, 0, endgame)
		self.drop = false 	
	end 		
	go.set_position(self.pos)

	
	
end


function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end


function on_input(self, action_id, action)
	if action_id == hash("left") then 
		if action.pressed then 
			sprite.play_flipbook("player1#sprite", "Player1_balling")
			if self.pos.y <= 150 then 
				self.is_start_timer = true 
			end 
		elseif action.released then 
			self.is_start_timer = false 
			if not self.drop then 	
				sprite.play_flipbook("player1#sprite", "Player1_stopballing")
			end 
		end

	end
end
